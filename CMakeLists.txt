CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
# policies from version 3.1 onwards (can be removed if min required version >= 3.1)
CMAKE_POLICY(SET CMP0054 NEW)

IF (CMAKE_VERSION VERSION_GREATER_EQUAL 3.13)
    CMAKE_POLICY(SET CMP0078 OLD)
ENDIF()
IF (CMAKE_VERSION VERSION_GREATER_EQUAL 3.14)
    CMAKE_POLICY(SET CMP0086 OLD)
ENDIF()

PROJECT(OPENQL)

IF (NOT CMAKE_BUILD_TYPE)
SET(CMAKE_BUILD_TYPE Release CACHE STRING
    "Type of build (None Debug Release RelWithDebInfo MinSizeRel)" FORCE)
SET_PROPERTY(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release"
    "RelWithDebInfo" "MinSizeRel")
ENDIF()

SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

FIND_PATH(LEMON_SOURCE_ROOT_DIR CMakeLists.txt
  PATHS ${PROJECT_SOURCE_DIR}/lemon ${PROJECT_SOURCE_DIR}/deps/lemon
  NO_DEFAULT_PATH
  DOC "Location of LEMON source as a CMAKE subproject")

IF(EXISTS ${LEMON_SOURCE_ROOT_DIR})
  ADD_SUBDIRECTORY(${LEMON_SOURCE_ROOT_DIR} deps/lemon)
  SET(LEMON_INCLUDE_DIRS
    ${LEMON_SOURCE_ROOT_DIR}
    ${PROJECT_BINARY_DIR}/deps/lemon
  )
  SET(LEMON_LIBRARIES lemon)
  UNSET(LEMON_ROOT_DIR CACHE)
  UNSET(LEMON_DIR CACHE)
  UNSET(LEMON_INCLUDE_DIR CACHE)
  UNSET(LEMON_LIBRARY CACHE)
ELSE()
  FIND_PACKAGE(LEMON QUIET NO_MODULE)
  FIND_PACKAGE(LEMON REQUIRED)
ENDIF()

SET(CLI11_INCLUDE_DIRS
  "${PROJECT_SOURCE_DIR}/deps/CLI11/include"
)

SET(LIBQASM_INCLUDE_DIRS
  "${PROJECT_SOURCE_DIR}/deps/libqasm/src/library"
)

SET(EIGEN_INCLUDE_DIRS
  "${CMAKE_SOURCE_DIR}/deps/eigen/Eigen"
)

SET(EIGEN_UNSUPPORTED_INCLUDE_DIRS
  "${CMAKE_SOURCE_DIR}/deps/eigen/unsupported"
)

SET(LIBQASM_SOURCE_DIRS
  "${PROJECT_SOURCE_DIR}/deps/libqasm/src/library"
)

SET(PYTHON_EXECUTABLE "/usr/bin/python3")
SET(PYTHON_LIBRARY "/usr/lib/python3.6")
SET(PYTHON_INCLUDE_DIR "/usr/include/python3.6")

FIND_PACKAGE(BISON 3.0)
FIND_PACKAGE(FLEX 2.6)

BISON_TARGET(
    MyParser
    ${LIBQASM_SOURCE_DIRS}/grammar.y ${CMAKE_CURRENT_BINARY_DIR}/grammar.tab.c
    COMPILE_FLAGS "-Wall -d -t -g -r all"
)

FLEX_TARGET(
    MyScanner
    ${LIBQASM_SOURCE_DIRS}/lex.l  ${CMAKE_CURRENT_BINARY_DIR}/lex.yy.c )

ADD_FLEX_BISON_DEPENDENCY(MyScanner MyParser)

SET_SOURCE_FILES_PROPERTIES(${CMAKE_CURRENT_BINARY_DIR}/grammar.tab.c PROPERTIES LANGUAGE CXX)
SET_SOURCE_FILES_PROPERTIES(${CMAKE_CURRENT_BINARY_DIR}/lex.yy.c PROPERTIES LANGUAGE CXX)
ADD_LIBRARY(lexgramstatic STATIC ${CMAKE_CURRENT_BINARY_DIR}/grammar.tab.c ${CMAKE_CURRENT_BINARY_DIR}/lex.yy.c)

## These are the include directories used by the compiler.
INCLUDE_DIRECTORIES(
  ${LEMON_INCLUDE_DIRS}
  ${CLI11_INCLUDE_DIRS}
  ${LIBQASM_INCLUDE_DIRS}
  ${EIGEN_INCLUDE_DIRS}
  ${EIGEN_UNSUPPORTED_INCLUDE_DIRS}
  ${PROJECT_SOURCE_DIR}/src
)
IF(CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 -Wall -Wfatal-errors -ggdb -lpthread -fPIC")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -std=c++11 -Wall -Wfatal-errors -ggdb -lpthread -fPIC")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

IF(MSVC)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP /D_USE_MATH_DEFINES /EHsc /bigobj")
ENDIF(MSVC)

IF("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 -Wall -Wfatal-errors -ggdb")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -std=c++11 -Wall -Wfatal-errors -Wno-unused-local-typedef -ggdb")
ENDIF("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(examples)
ADD_SUBDIRECTORY(tests)
ADD_SUBDIRECTORY(swig)
