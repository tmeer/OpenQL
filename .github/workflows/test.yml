name: Test

on:
  push:
    branches:
    - develop
  pull_request:

jobs:
  cpp:
    name: 'C++ tests'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
        - windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew install bison flex
        echo "::add-path::/usr/local/opt/bison/bin"
        echo "::add-path::/usr/local/opt/flex/bin"
    - uses: actions/cache@v2
      if: matrix.os == 'windows-latest'
      with:
        path: C:\Users\runneradmin\AppData\Local\Temp\chocolatey
        key: ${{ runner.os }}-chocolatey-cpp-0
        restore-keys: |
          ${{ runner.os }}-chocolatey-cpp-
          ${{ runner.os }}-chocolatey-
    - name: Install dependencies
      if: matrix.os == 'windows-latest'
      run: choco install winflexbison3 --version 2.5.18.20190508 || choco install winflexbison3 --version 2.5.18.20190508 || choco install winflexbison3 --version 2.5.18.20190508
    - name: Configure
      run: cmake . -DCMAKE_BUILD_TYPE=Debug -DOPENQL_BUILD_TESTS=ON -DBUILD_SHARED_LIBS=OFF
    - name: Build
      run: cmake --build . --parallel
    - name: Test
      run: ctest -C Debug --output-on-failure

  cpp-standalone:
    name: 'C++ standalone program'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Configure
      run: |
        mkdir cbuild
        cd cbuild && cmake ../examples/cpp-standalone-example
    - name: Build
      run: make -C cbuild -j
    - name: Test
      run: cd tests && ../cbuild/example

  python:
    name: Python
    runs-on: ${{ matrix.os }}
    env:
      OPENQL_BUILD_TYPE: 'Debug'
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
        - windows-latest
        python:
        - '3.5'
        - '3.6'
        - '3.7'
        - '3.8'
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: Install dependencies
      run: python -m pip install --upgrade pip setuptools wheel pytest numpy
    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install -y swig
    - name: Install dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew install bison flex swig
        echo "::add-path::/usr/local/opt/bison/bin"
        echo "::add-path::/usr/local/opt/flex/bin"
    - uses: actions/cache@v2
      if: matrix.os == 'windows-latest'
      with:
        path: C:\Users\runneradmin\AppData\Local\Temp\chocolatey
        key: ${{ runner.os }}-chocolatey-python-1
        restore-keys: |
          ${{ runner.os }}-chocolatey-python-
          ${{ runner.os }}-chocolatey-
    - name: Install dependencies
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        choco install winflexbison3 --version 2.5.18.20190508 || choco install winflexbison3 --version 2.5.18.20190508 || choco install winflexbison3 --version 2.5.18.20190508
        choco install swig --version 4.0.1
        echo "::set-env name=OPENQL_BUILD_TYPE::Release"
    - name: Build
      env:
        NPROCS: 100
      run: python -m pip install --verbose .
    - name: Test
      run: python -m pytest

  conda:
    name: Conda
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
        - windows-2016
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up conda
      uses: goanpeca/setup-miniconda@v1
      with:
        auto-update-conda: true
        miniconda-version: "latest"
        channel-priority: strict
        channels: conda-forge
        show-channel-urls: true
        use-only-tar-bz2: true
    - name: Install Windows dependencies
      if: matrix.os == 'windows-2016'
      run: choco install winflexbison3 --version 2.5.18.20190508 || choco install winflexbison3 --version 2.5.18.20190508 || choco install winflexbison3 --version 2.5.18.20190508
    - name: Install conda dependencies
      run: conda install conda-build conda-verify -y
    - name: Build & test
      env:
        NPROCS: 100
      run: conda build conda-recipe
    - name: Install
      # This doesn't seem to work on Windows in CI because everything appears
      # to build in a non-default environment and conda is broken for that,
      # see https://github.com/conda/conda/issues/7758
      # Note that conda build already does a test install in a fresh
      # environment, so this is a bit redundant anyway.
      if: matrix.os != 'windows-2016'
      run: conda install openql --use-local
